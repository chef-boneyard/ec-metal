#!/bin/bash
#
# Cluster like it's 1999
#

LOGNAME=/var/log/opscode/keepalived/cluster.log
PROGNAME=$(basename $0)

# must be longer than unicorn 60 second timeout
export SVWAIT=30

requested_state_file=/var/opt/opscode/keepalived/requested_cluster_status
current_state_file=/var/opt/opscode/keepalived/current_cluster_status
lockfile=/var/opt/opscode/keepalived/cluster-transition.lock

function log_me
{
  echo $1
  echo "$(date -R): ${1}" >> $LOGNAME
}

function error_exit
{
  log_me "$1"
  echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
  exit 1
}

<%- keepalive_services = Dir.chdir(node['runit']['sv_dir']){Dir.glob('**/keepalive_me').map{|f| File.dirname(f)}}.sort -%>

function transition
{
  log_me "Transitioning to $1"
  case "$1" in
    master)
      if [ -x '/var/opt/opscode/keepalived/bin/custom_backend_storage' ]; then
          log_me "Attempting CUSTOM BACKEND STORAGE takeover"
          /var/opt/opscode/keepalived/bin/custom_backend_storage attach >> $LOGNAME 2>&1
          if [ $? -gt 0 ]; then
            error_exit "CUSTOM BACKEND STORAGE attach failed"
          else
            log_me "CUSTOM BACKEND STORAGE attach success"
          fi
      else
        # 10 * SVWAIT
        try=300
        while true; do
          log_me "Attempting DRBD primary takeover - attempts left ${try}"
          drbdadm primary pc0 && break
          let "--try" || error_exit "Cannot become drbd primary!"
          last_requested_state=`echo -n $(cat $requested_state_file)`
          if [ "$last_requested_state" != "master" ]; then
            log_me "Requested state transition to backup, aborting trying to aquire DRBD primary"
            return
          fi
          sleep 1
        done

        log_me "DRBD primary takeover successful"

        log_me "Mounting <%= node['private_chef']['drbd']['device'] %> at <%= node['private_chef']['drbd']['data_dir'] %>"
        mount <%= node['private_chef']['drbd']['device'] %> <%= node['private_chef']['drbd']['data_dir'] %> || true
      fi

<%- keepalive_services.each do |service| -%>
      log_me "Starting service <%= service %>"
      /opt/opscode/bin/private-chef-ctl start <%= service %> || error_exit "Cannot start <%= service %>"
      <%- if node['private_chef']['keepalived']['service_posthooks'][service] -%>
        log_me "Doing post-start hook for <%= service %>"
        <%= node['private_chef']['keepalived']['service_posthooks'][service] %>
      <%- end -%>
<%- end -%>

      if [ -x '/var/opt/opscode/keepalived/bin/custom_backend_ip' ]; then
          log_me "Attempting CUSTOM BACKEND IP primary takeover"
          /var/opt/opscode/keepalived/bin/custom_backend_ip attach >> $LOGNAME 2>&1
          if [ $? -gt 0 ]; then
            error_exit "CUSTOM BACKEND IP attach failed"
          else
            log_me "CUSTOM BACKEND IP attach success"
          fi
      fi

      ;;
    backup)
<%- keepalive_services.reverse.each do |service| -%>
      log_me "Stopping service <%= service %>"
      /opt/opscode/bin/private-chef-ctl graceful-kill <%= service %> || error_exit "Cannot kill <%= service %>"
<%- end -%>

      if [ -x '/var/opt/opscode/keepalived/bin/custom_backend_storage' ]; then
          log_me "Attempting CUSTOM BACKEND STORAGE detach"
          /var/opt/opscode/keepalived/bin/custom_backend_storage detach >> $LOGNAME 2>&1
          if [ $? -gt 0 ]; then
            error_exit "CUSTOM BACKEND STORAGE detach failed"
          else
            log_me "CUSTOM BACKEND STORAGE detach success"
          fi
      else
        # 10 * SVWAIT
        try=300
        while true; do
          log_me "Attempting to become DRBD secondary - attempts left ${try}"
          mountpoint <%= node['private_chef']['drbd']['data_dir'] %> && fuser -km <%= node['private_chef']['drbd']['data_dir'] %>
          umount -f <%= node['private_chef']['drbd']['data_dir'] %> || true
          drbdadm secondary pc0 && break
          let "--try" || error_exit "Cannot become DRBD secondary"
          sleep 1
        done
      fi

      if [ -x '/var/opt/opscode/keepalived/bin/custom_backend_ip' ]; then
          log_me "Attempting CUSTOM BACKEND IP to go standby"
          /var/opt/opscode/keepalived/bin/custom_backend_ip detach >> $LOGNAME 2>&1
          if [ $? -gt 0 ]; then
            error_exit "CUSTOM BACKEND IP detach failed"
          else
            log_me "CUSTOM BACKEND IP detach success"
          fi
      fi

      ;;
    fault)
      # Um... we are on the way elsewhere
      ;;
    *)
  esac
}

function lock
{
  if [ -e $1 ]; then
    read lockpid < $1
    if [ ! -z "$lockpid" -a -d /proc/$lockpid ]; then
      return 1
    fi
  fi
  trap "rm -f $1; exit" INT TERM EXIT
  echo $$ > $1
  return 0
}

function unlock
{
  rm $1
  trap - INT TERM EXIT
}

function transition_loop
{
   transition "$1"
   log_me "Transitioned to $1"
   transitioned_to=$1
   last_requested_state=`echo -n $(cat $requested_state_file)`
   while [ "$transitioned_to" != "$last_requested_state" ]; do
     transition $last_requested_state
     log_me "Transitioned to $last_requested_state"
     transitioned_to=$last_requested_state
     last_requested_state=`echo -n $(cat $requested_state_file)`
   done
   unlock $lockfile
   echo $transitioned_to > $current_state_file
}

echo $1 > $requested_state_file

if lock $lockfile; then
   transition_loop "$1"
else
   log_me "Requested transition to $1"
   error_exit "Requested transition to $1, but state transition already running."
fi

exit 0
